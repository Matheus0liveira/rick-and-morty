{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport Lottie from 'react-lottie';\nimport { FiSearch, FiArrowLeft, FiArrowRight, FiHeart } from 'react-icons/fi';\nimport StyledMain, { Text, Description, StyledButton, StyledArrowDown, StyledProfiles, InputSearch, Box, Line, SectionCards, CountPages } from './styles';\nimport { Container } from '../../assets/globalStyles';\nimport SwipeDown from '../../../public/swipeDown.json';\nimport Card from '../../compoenents/Card';\nimport api from '../../api/profiles';\n\nfunction Home() {\n  const {\n    0: showDescrition,\n    1: setShowDescription\n  } = useState(false);\n  const searchRef = useRef(null);\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: SwipeDown,\n    rendererSettings: {\n      preserveAspectRatio: 'xMidYMid slice'\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(searchRef.current.value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledMain, null, __jsx(Container, null, __jsx(\"img\", {\n    src: \"/rick.svg\",\n    alt: \"\"\n  }), __jsx(Text, null, \"Rick and Morty\"), __jsx(Description, {\n    showDescrition: showDescrition\n  }, \"A s\\xE9rie mostra as aventuras ins\\xF3litas do cientista beberr\\xE3o Rick Sanchez e seu neto inseguro e com horm\\xF4nios em ebuli\\xE7\\xE3o Morty Smith, membros de uma fam\\xEDlia americana comum, composta tamb\\xE9m por Jerry, um pai ignorante; Beth, uma m\\xE3e sensata e Summer, uma irm\\xE3 mais velha, t\\xEDpica adolescente alienada, que se compadece do irm\\xE3o quando passa a integrar as aventuras de seu av\\xF4.\"), __jsx(StyledButton, {\n    onClick: () => setShowDescription(!showDescrition),\n    about: \"true\"\n  }, !showDescrition ? 'SOBRE' : 'ESCONDER'), __jsx(StyledArrowDown, null, __jsx(Lottie, {\n    isClickToPauseDisabled: true,\n    options: defaultOptions,\n    height: 80,\n    width: 80\n  })))), __jsx(StyledProfiles, null, __jsx(Box, null), __jsx(Container, null, __jsx(\"div\", null, __jsx(Text, {\n    person: \"true\"\n  }, \"Personagens\"), __jsx(Line, null)), __jsx(InputSearch, {\n    onSubmit: handleSubmit\n  }, __jsx(\"input\", {\n    ref: searchRef,\n    type: \"text\",\n    placeholder: \"Pesquisar\"\n  }), __jsx(StyledButton, {\n    type: \"submit\",\n    search: \"true\"\n  }, __jsx(FiSearch, null)))), __jsx(Container, null, __jsx(SectionCards, null, __jsx(Card, null), __jsx(Card, null), __jsx(Card, null), __jsx(Card, null), __jsx(Card, null), __jsx(Card, null), __jsx(Card, null))), __jsx(Container, null, __jsx(CountPages, null, __jsx(StyledButton, {\n    countPage: \"true\"\n  }, \" \", __jsx(FiArrowLeft, null), \" Prev\"), __jsx(Text, {\n    count: \"true\"\n  }, \"01\"), __jsx(StyledButton, {\n    countPage: \"true\"\n  }, \"Next \", __jsx(FiArrowRight, null)))), __jsx(Text, {\n    footer: \"true\"\n  }, \"Created By: \", __jsx(\"a\", {\n    target: \"_blank\",\n    href: \"https://github.com/Matheus0liveira\"\n  }, \" Matheus Oliveira \", __jsx(\"span\", null, __jsx(FiHeart, null), \" \"), \" \"))), __jsx(\"footer\", null));\n}\n\n;\nexport async function getStaticProps({\n  params\n}) {\n  const {\n    data\n  } = await api.get(`/character?page=${params.id}`); // console.log(ctx.query);\n\n  return {\n    props: data\n  };\n}\nexport async function getStaticPaths() {\n  // //Basicamente o mesmo código da Home, com diferença no return\n  // const pokemons = await fetch('https://pokeapi.co/api/v2/pokedex/2/')\n  //   .then((respostaDoServer) => {\n  //     if (respostaDoServer.ok) {\n  //       return respostaDoServer.json();\n  //     }\n  //     throw new Error('Deu problema');\n  //   })\n  //   .then((respostaEmObjeto) => respostaEmObjeto.pokemon_entries);\n  // return {\n  //   paths: pokemons.map((pokemon) => ({\n  //     //pra cada pokemon na resposta, um caminho sera gerado\n  //     params: {\n  //       id: pokemon.entry_number.toString(),\n  //       //necessario usar o toString porque não aceita inteiro como caminho (path)\n  //     },\n  //   })),\n  //   fallback: false,\n  // };\n  const {\n    data\n  } = await api.get(`/character?page=1`);\n  return {\n    paths: data.results.map(person => ({\n      params: {\n        id: person.id.toString()\n      }\n    })),\n    fallback: false\n  };\n}\n;\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}